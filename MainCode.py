import numpy as np
from shapely.geometry import Point
import geopandas as gpd
import matplotlib.pyplot as plt
import concavity

x=[51.3785934, 51.3765764, 51.374774, 51.375761, 51.3773489, 51.3785076, 51.3799667, 51.3807821, 51.3821125, 51.3836145, 51.3848591, 51.3855886, 51.3863611, 51.3863182, 51.3850307, 51.3835287, 51.3815117, 51.3802671, 51.3783789, 51.3764906, 51.3749027, 51.3735294, 51.3722849, 51.3706112, 51.3695383, 51.3682938, 51.3670492, 51.365633, 51.3649464, 51.3628435, 51.3614273, 51.3600111, 51.359067, 51.3588095, 51.3586807, 51.3582945, 51.358037, 51.3573933, 51.3568783, 51.3548613, 51.3534021, 51.3513851, 51.3492823, 51.3479948, 51.3466215, 51.3442612, 51.3425875, 51.3422871, 51.3422441, 51.3412571, 51.3402271, 51.3397121, 51.339283, 51.3388968, 51.3383389, 51.3373089, 51.3363218, 51.3356352, 51.3326311, 51.3312149, 51.3294125, 51.3283396, 51.3260221, 51.3239193, 51.3234043, 51.3224602, 51.321044, 51.318984, 51.3177395, 51.315465, 51.3124609, 51.3103151, 51.3079119, 51.3067532, 51.304307, 51.3036633, 51.304822, 51.3044357, 51.3031483, 51.301775, 51.2999725, 51.2982988, 51.2972689, 51.2950802, 51.2934494, 51.2931919, 51.2919903, 51.2898016, 51.2866259, 51.2848234, 51.283257, 51.2798238, 51.2772489, 51.2755537, 51.2746739, 51.2728071, 51.2717342, 51.2710047, 51.2696314, 51.2701464, 51.2716484, 51.2731075, 51.2746525, 51.2750816, 51.2725496, 51.2692881, 51.2675285, 51.2656832, 51.2641811, 51.2610912, 51.2587738, 51.2557268, 51.2538385, 51.2499332, 51.2465858, 51.2446976, 51.242938, 51.2395906, 51.2366295, 51.2321234, 51.2294197, 51.2258148, 51.2188625, 51.2074471, 51.1942291, 51.1895084, 51.1814404, 51.1759472, 51.1717415, 51.1645317, 51.1576653, 51.1516571, 51.1462498, 51.1391258, 51.1331177, 51.128912, 51.1245346, 51.1202431, 51.1127758, 51.1096859, 51.1051369, 51.1008453, 51.0962105, 51.095438, 51.0940647, 51.0936356, 51.096468, 51.101017, 51.1058235, 51.1091709, 51.1140633, 51.117754, 51.1207581, 51.123848, 51.1291695, 51.1343193, 51.1387825, 51.1449623, 51.1578369, 51.164875, 51.1741447, 51.1846161, 51.198864, 51.2129402, 51.2228966, 51.2270164, 51.2280464, 51.229763, 51.230793, 51.2330246, 51.2385178, 51.2426376, 51.2500191, 51.2551689, 51.2618637, 51.2671852, 51.2731934, 51.2779999, 51.2828064, 51.2910461, 51.2996292, 51.3104439, 51.3167953, 51.3200569, 51.3217735, 51.327095, 51.3356781, 51.3446045, 51.3547325, 51.3586807, 51.3658905, 51.3694954, 51.3749886, 51.3796234, 51.3868332, 51.3892365, 51.3983345, 51.3997078, 51.4024544, 51.404686, 51.4072609, 51.4127541, 51.4160156, 51.4179039, 51.4306068, 51.435585, 51.4445114, 51.4488029, 51.4566994, 51.4649391, 51.4642525, 51.4623642, 51.4608192, 51.4601326, 51.4599609, 51.4599609, 51.4615059, 51.4657974, 51.4731789, 51.4795303, 51.4851952, 51.4912033, 51.4956665, 51.5003014, 51.5066528, 51.5093994, 51.5093994, 51.5063095, 51.5054512, 51.5039063, 51.5044212, 51.5097427, 51.5172958, 51.5178108, 51.5164375, 51.5145493, 51.5136909, 51.5157509, 51.5184975, 51.5202141, 51.5251923, 51.5291405, 51.5294838, 51.5262222, 51.5224457, 51.5205574, 51.5188408, 51.5179825, 51.5169525, 51.5166092, 51.5160942, 51.5196991, 51.5231323, 51.5289688, 51.5366936, 51.5452766, 51.5633011, 51.5739441, 51.5900803, 51.5984917, 51.6082764, 51.6187477, 51.6278458, 51.6410637, 51.6439819, 51.6434669, 51.6386604, 51.6304207, 51.6235542, 51.6151428, 51.6051865, 51.5967751, 51.5923119, 51.5828705, 51.5713692, 51.5633011, 51.5609837, 51.5590096, 51.5531731, 51.5471649, 51.5431309, 51.5412426, 51.5404701, 51.5392685, 51.537466, 51.5369511, 51.5362644, 51.5324879, 51.5267372, 51.5195274, 51.5136909, 51.5109444, 51.5029621, 51.4977264, 51.4941216, 51.4910316, 51.4865685, 51.4833069, 51.4776421, 51.4736938, 51.4712048, 51.4669991, 51.4630508, 51.4599609, 51.4557552, 51.4515495, 51.4452839, 51.4403915, 51.4357567, 51.4306068, 51.4252853, 51.420908, 51.4154148, 51.410265, 51.4052868, 51.3994503, 51.3941288, 51.3871765, 51.3827133, 51.3797951, 51.3786149]
y=[35.808556, 35.8078251, 35.8070247, 35.8058413, 35.8049364, 35.8045187, 35.803405, 35.8022216, 35.8010381, 35.8004464, 35.7998547, 35.7987757, 35.7975226, 35.796548, 35.794529, 35.7938676, 35.7933803, 35.7933107, 35.7933107, 35.7934151, 35.7938328, 35.794355, 35.7947031, 35.79526, 35.7960258, 35.7973485, 35.7984276, 35.8000635, 35.8016647, 35.8029873, 35.8038226, 35.8040663, 35.8037182, 35.8026044, 35.8014906, 35.8002028, 35.7987757, 35.7977314, 35.7966872, 35.7956777, 35.7954341, 35.7955037, 35.7953993, 35.7955037, 35.7956777, 35.7962347, 35.7966524, 35.7969308, 35.7977662, 35.7986016, 35.7984276, 35.7974182, 35.7965828, 35.7948771, 35.7935195, 35.7921271, 35.7912917, 35.7905606, 35.7898296, 35.7895163, 35.789203, 35.7889941, 35.7891682, 35.7896207, 35.7882979, 35.7868706, 35.7860351, 35.7852344, 35.7848166, 35.784747, 35.7854432, 35.7857566, 35.7857566, 35.7860699, 35.7855825, 35.7847818, 35.7815788, 35.7804996, 35.7787588, 35.7772617, 35.7764609, 35.7757993, 35.7751726, 35.776043, 35.7774706, 35.776426, 35.7759734, 35.7754511, 35.7749637, 35.7745111, 35.773658, 35.772213, 35.7728398, 35.7738669, 35.7739888, 35.7734839, 35.7727701, 35.7723349, 35.7710292, 35.7693578, 35.7678953, 35.7667114, 35.7655274, 35.763856, 35.7626023, 35.7616969, 35.7620451, 35.7645872, 35.765423, 35.7655971, 35.7652489, 35.7651792, 35.7673382, 35.7679301, 35.7667462, 35.7652489, 35.7636122, 35.7630202, 35.7628113, 35.7626023, 35.7625675, 35.7632988, 35.7637863, 35.7644828, 35.7643435, 35.7646917, 35.7655274, 35.7661542, 35.7647614, 35.7649006, 35.7629506, 35.7612094, 35.7603736, 35.7588413, 35.757309, 35.7562642, 35.7559159, 35.7552194, 35.7532691, 35.7523636, 35.751458, 35.7499952, 35.7484627, 35.7471392, 35.7440044, 35.7389885, 35.7371075, 35.7359231, 35.7356444, 35.734669, 35.7330666, 35.7309067, 35.7254719, 35.7235208, 35.7203154, 35.7169705, 35.7139042, 35.7108378, 35.7059592, 35.7042865, 35.7013591, 35.6985711, 35.6928552, 35.6882544, 35.685187, 35.6821195, 35.6784941, 35.6727768, 35.6688721, 35.665525, 35.6614805, 35.658691, 35.6570173, 35.6549251, 35.6521354, 35.6499036, 35.6478112, 35.6462767, 35.6427892, 35.6404176, 35.6345581, 35.6296748, 35.6245122, 35.6228378, 35.618791, 35.6133486, 35.6077662, 35.6056727, 35.6060914, 35.6063706, 35.6065101, 35.6091618, 35.610697, 35.610697, 35.6105575, 35.6099992, 35.6088827, 35.607208, 35.6031605, 35.6002294, 35.5961815, 35.5919939, 35.588504, 35.5847348, 35.5794296, 35.5769165, 35.5764977, 35.5776146, 35.5773354, 35.5788712, 35.5820822, 35.5861308, 35.5910167, 35.5952044, 35.5995315, 35.6033, 35.6063706, 35.609441, 35.613209, 35.6133486, 35.6113948, 35.6066497, 35.605254, 35.6033, 35.6026022, 35.6039979, 35.6077662, 35.6120926, 35.617256, 35.6208842, 35.6240936, 35.6228378, 35.6229773, 35.6284191, 35.6330234, 35.6390225, 35.6458582, 35.6492061, 35.6532513, 35.6564594, 35.6646882, 35.6709639, 35.6773786, 35.6801674, 35.6895092, 35.6942494, 35.6992681, 35.7026137, 35.7072138, 35.7084683, 35.7148799, 35.7192005, 35.7203154, 35.7204548, 35.7193398, 35.7187824, 35.7200367, 35.7200367, 35.7189217, 35.721291, 35.7200367, 35.7196186, 35.7222665, 35.7247751, 35.7267261, 35.734669, 35.7384312, 35.7426111, 35.745119, 35.7476268, 35.7498559, 35.7534781, 35.7555677, 35.7590503, 35.7650399, 35.7701935, 35.7713077, 35.7724916, 35.7766001, 35.7794551, 35.7842596, 35.7896207, 35.7939373, 35.7990193, 35.8061893, 35.810505, 35.8157252, 35.8173956, 35.8147508, 35.8156556, 35.8168388, 35.8165604, 35.8173956, 35.8182307, 35.8221282, 35.8232417, 35.8211538, 35.8215714, 35.8224761, 35.8234504, 35.8248423, 35.8283218, 35.827278, 35.8240072, 35.8224065, 35.8215018, 35.8213626, 35.8222673, 35.8244247, 35.8253294, 35.82693, 35.8215714, 35.8196227, 35.8178132, 35.8170476, 35.8157948, 35.814542, 35.8125235, 35.8109226, 35.8093217, 35.8085473]

coords = np.array(list(zip(x, y)))
gpd.GeoSeries([Point(c) for c in coords]).plot()

ch = concavity.concave_hull(coords,2)
ch

concavity.plot_concave_hull(coords, ch)

from concavity.utils import gaussian_smooth_geom
geom = gaussian_smooth_geom( ch)
concave_df = concavity.find_concave_vertices(geom,0, filter_type ='all')
convex_df = concavity.find_convex_vertices(geom,0, filter_type ='all')
concavity.plot_vertices(geom, concave_df, convex_df)

#check
ch.contains(  Point(51.4438  , 35.8134)   )

import pandas as pd

df = pd.read_excel(r"......\Points.xlsx"  )
df["belong"] = 0

for i in range(0 , len(df)):
    if ch.contains(  Point(df.iloc[i,0] , df.iloc[i,1])   ) == True :
        df.iloc[i , 2] = 1
    else:
        df.iloc[i , 2] = 0

df.to_excel( r"...\FinishPoints.xlsx" )